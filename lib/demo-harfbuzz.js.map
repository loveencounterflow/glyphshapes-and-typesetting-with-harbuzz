{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-harfbuzz.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DEMO-HARFBUZZ'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nSEMVER                    = require 'semver'\nSHELL                     = require 'shelljs'\nSP                        = require 'steampipes'\n{ $\n  $async\n  $watch\n  $show\n  $drain }                = SP.export()\nDATOM                     = require 'datom'\n{ new_datom\n  freeze    }             = DATOM.export()\n{ spawn }                 = require 'child_process'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate }              = types.export()\n\n\n\n#===========================================================================================================\n# CFG, TYPES\n#-----------------------------------------------------------------------------------------------------------\ndefaults =\n  internal:\n    verbose: false\n    harfbuzz:\n      semver: '^2.7.4'\n  hb_cfg:\n    font:\n      path:         null\n      features:     null\n    text:         null\n    arrangement:  null\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'hb_cfg', tests:\n  \"x is an object\":                 ( x ) -> @isa.object          x\n  \"x.text is a text\":               ( x ) -> @isa.text            x.text\n  \"x.font is a hb_font\":            ( x ) -> @isa.hb_font         x.font\n  \"x.arrangement is an optional list of objects\": ( x ) ->\n    return true unless x.arrangement?\n    return @isa_list_of.object x.arrangement\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'hb_font', tests:\n  \"x is an object\":                 ( x ) -> @isa.object          x\n  \"x.path is a nonempty_text\":      ( x ) -> @isa.nonempty_text   x.path\n  \"x.features is an optional text\": ( x ) -> @isa_optional.text   x.features\n\n\n#===========================================================================================================\n# ENSURE HARFBUZZ INSTALLED\n#-----------------------------------------------------------------------------------------------------------\n@_show_shell_output = ( output ) ->\n  echo()\n  help '^demo-harfbuzz@87^ stdout:', ( rpr output.stdout ) if output.stdout? and output.stdout.length > 0\n  warn '^demo-harfbuzz@87^ stderr:', ( rpr output.stderr ) if output.stderr? and output.stderr.length > 0\n  echo()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@ensure_harfbuzz_version = ->\n  cmds = [\n    'hb-shape'\n    'hb-view' ]\n  #.........................................................................................................\n  for cmd in cmds\n    output = SHELL.exec \"#{cmd} --version\", { silent: ( not defaults.internal.verbose ), }\n    #.......................................................................................................\n    unless output.code is 0\n      @_show_shell_output output\n      throw new Error \"^demo-harfbuzz@87^ ensure that harfbuzz is available on the path (recommendation: `homebrew install harfbuzz` on Linux, Mac)\"\n    pattern = /// ^ #{cmd} \\s+ \\(HarfBuzz\\) \\s+ (?<version>[0-9a-z.]+) \\n ///\n    #.......................................................................................................\n    unless ( match = output.stdout.match pattern )?\n      @_show_shell_output output\n      throw new Error \"^demo-harfbuzz@87^ ensure that harfbuzz is available on the path (recommendation: `homebrew install harfbuzz` on Linux, Mac)\"\n    #.......................................................................................................\n    unless SEMVER.satisfies match.groups.version, defaults.internal.harfbuzz.semver\n      @_show_shell_output output\n      throw new Error \"^demo-harfbuzz@87^ found HarfBuzz #{rpr cmd} version #{rpr match.groups.version}, expected #{rpr defaults.internal.harfbuzz.semver}\"\n    #.......................................................................................................\n    whisper \"^33787^ #{cmd} version #{match.groups.version} OK\" if defaults.internal.verbose\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n# ARRANGEMENT\n#-----------------------------------------------------------------------------------------------------------\n@$extract_hbshape_positioning = ( cfg ) ->\n  return $ ( d, send ) ->\n    return null unless d.$key is '^stdout'\n    return null unless d.$value?\n    ### NOTE first try simple format, then format that includes line numbers ###\n    unless ( match = d.$value.match /^(?<positions>\\[.*\\])$/ )?\n      return null unless ( match = d.$value.match /^(?<lnr>[0-9]+):\\s+(?<positions>\\[.*\\])$/ )?\n    send JSON.parse match.groups.positions\n\n#-----------------------------------------------------------------------------------------------------------\n@$convert_shape_datoms = ( cfg ) ->\n  symid         = null\n  path_start    = '<path style=\"stroke:none;\" d=\"'\n  path_end      = ' \"/>'\n  use_pattern   = /^\\s*<use xlink:href=\"#(?<symid>[^\"]+)\" x=\"(?<dx>[^\"]+)\" y=\"(?<dy>[^\"]+)\"\\/>/\n  use_idx       = -1\n  #.........................................................................................................\n  return $ ( d, send ) ->\n    return null unless d.$key is '^stdout'\n    return null unless ( value = d.$value )?\n    return null if ( value.match /^<\\// )?\n    return null if value is '<defs>'\n    return null if value is '<g>'\n    return null if value.startsWith '<?xml '\n    return null if value.startsWith '<g '\n    return null if value.startsWith '<rect ' ### NOTE could extract visual text extent from background box ###\n    #.......................................................................................................\n    if value.startsWith '<svg '\n      ### NOTE may want to extract width, height, viewBox ###\n      return null\n    #.......................................................................................................\n    if value.startsWith '<symbol '\n      ### TAINT validate that symid was found ###\n      symid = value.replace /^.*\\sid=\"([^\"]+)\".*$/, '$1'\n      return null\n    #.......................................................................................................\n    if value is '<path style=\"stroke:none;\" d=\"\"/>'\n      # warn '^7767^', d\n      # send new_datom '^space'\n      send new_datom '^glyfpath', { symid, glyfpath: null, glyfname: 'space', }\n      return null\n    #.......................................................................................................\n    if ( value.startsWith path_start ) and ( value.endsWith path_end )\n      glyfpath = value[ path_start.length ... value.length - path_end.length ]\n      send new_datom '^glyfpath', { symid, glyfpath, }\n      return null\n    #.......................................................................................................\n    if ( match = value.match use_pattern )?\n      use_idx++\n      data = match.groups\n      if cfg.arrangement?\n        unless ( data.glyfname = cfg.arrangement[ use_idx ]?.g ? null )?\n          throw new Error \"^demo-harfbuzz@87^ passed arrangement but use_idx #{use_idx} has no entry\"\n      send new_datom '^use', data\n      return null\n    #.......................................................................................................\n    throw new Error \"^demo-harfbuzz@87^ unexpected SVG element #{rpr value}\"\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$consolidate_shape_datoms = ( cfg ) ->\n  last            = Symbol 'last'\n  path_by_symid   = {}\n  R               = {}\n  #.........................................................................................................\n  return $ { last, }, ( d, send ) ->\n    if d is last\n      # whisper '^6667^', path_by_symid\n      return send R\n    #.......................................................................................................\n    # whisper '^784^', d\n    # whisper '^784^', ( k for k of path_by_symid )\n    switch d.$key\n      when '^glyfpath'\n        path_by_symid[ d.symid ] = d.glyfpath\n      when '^use'\n        return null unless ( glyfname = d.glyfname )?\n        unless ( glyfpath = path_by_symid[ d.symid ] )?\n          throw new Error \"^demo-harfbuzz@87^ unable to locate glyfpath for glyfname #{glyfname}\"\n        R[ glyfname ] = glyfpath\n      else\n        throw new Error \"^demo-harfbuzz@87^ unexpected datom #{rpr d}\"\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_positionings = ( cfg ) ->\n  last      = Symbol 'last'\n  count     = 0\n  #.........................................................................................................\n  return $watch { last, }, ( d ) ->\n    if d is last\n      urge CND.reverse \"found #{count} glyph positionings\"\n      return null\n    return null unless isa.list d\n    count += d.length\n    for shape in d\n      info shape\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT add styling, font features ###\n@arrange_text = ( cfg ) -> new Promise ( resolve, reject ) =>\n  cfg      = { defaults.hb_cfg..., cfg..., }\n  validate.hb_cfg cfg\n  { text\n    font      } = cfg\n  { path\n    features }  = font\n  #.........................................................................................................\n  ### TAINT code duplication ###\n  parameters    = []\n  parameters.push '--output-format=json'\n  parameters.push '--font-size=1000'\n  parameters.push \"--features=#{font.features}\" if font.features?\n    # '--no-glyph-names' ### NOTE when active, output glyf IDs instead of glyph names ###\n    # '--show-extents'\n    # '--show-flags'\n    # '--verbose'\n  parameters.push font.path\n  parameters.push text\n  #.........................................................................................................\n  cp              = spawn 'hb-shape', parameters\n  stream_settings = { bare: true, }\n  source          = SP.source_from_child_process cp, stream_settings\n  pipeline        = []\n  pipeline.push source\n  pipeline.push SP.$split_channels()\n  pipeline.push SP.$select '^stderr', ( d ) -> reject new Error d.$value\n  ( pipeline.push $watch ( d ) => whisper '^33344^', d ) if defaults.internal.verbose\n  pipeline.push @$extract_hbshape_positioning cfg\n  ( pipeline.push @$show_positionings           cfg ) if defaults.internal.verbose\n  pipeline.push $drain ( R ) ->\n    urge \"arrange_text finished\" if defaults.internal.verbose\n    resolve R.flat Infinity\n  SP.pull pipeline...\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n# FETCH OUTLINES\n#-----------------------------------------------------------------------------------------------------------\n@$show_usage_counts = ( cfg ) ->\n  last      = Symbol 'last'\n  count     = 0\n  #.........................................................................................................\n  return $watch { last, }, ( d ) ->\n    if d is last\n      urge CND.reverse \"found #{count} usage tags\"\n      return null\n    return null unless d.$key is '^use'\n    count++\n    return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$show_svg = ( cfg ) ->\n#   last      = Symbol 'last'\n#   collector = []\n#   #.........................................................................................................\n#   return $watch { last, }, ( d ) ->\n#     if d is last\n#       urge '\\n' + collector.join '\\n'\n#       return null\n#     return null unless d.$key is '^stdout'\n#     return null unless ( value = d.$value )?\n#     collector.push value\n\n#-----------------------------------------------------------------------------------------------------------\n@fetch_outlines = ( cfg ) ->\n  cfg      = { defaults.hb_cfg..., cfg..., }\n  validate.hb_cfg cfg\n  return @fetch_outlines_fast cfg\n\n#-----------------------------------------------------------------------------------------------------------\n@fetch_outlines_fast = ( cfg ) -> new Promise ( resolve, reject ) =>\n  { text\n    font\n    arrangement } = cfg\n  #.........................................................................................................\n  parameters    = []\n  parameters.push '--output-format=svg'\n  parameters.push '--font-size=1000'\n  parameters.push \"--features=#{font.features}\" if font.features?\n  parameters.push font.path\n  parameters.push text\n    # '--show-extents'\n    # '--show-flags'\n    # '--verbose'\n  #.........................................................................................................\n  cp              = spawn 'hb-view', parameters\n  stream_settings = { bare: true, }\n  source          = SP.source_from_child_process cp, stream_settings\n  pipeline        = []\n  pipeline.push source\n  pipeline.push SP.$split_channels()\n  pipeline.push SP.$select '^stderr', ( d ) -> reject new Error d.$value\n  pipeline.push @$convert_shape_datoms      cfg\n  ( pipeline.push @$show_usage_counts         cfg ) if defaults.internal.verbose\n  pipeline.push @$consolidate_shape_datoms  cfg\n  ( pipeline.push $show() ) if defaults.internal.verbose\n  pipeline.push $drain ( R ) ->\n    urge \"fetch_outlines finished\" if defaults.internal.verbose\n    resolve R[ 0 ]\n  SP.pull pipeline...\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n# HIGH-LEVEL API\n#-----------------------------------------------------------------------------------------------------------\n@shape_text = ( cfg ) ->\n  arrangement           = await @arrange_text cfg\n  cfg                   = { cfg..., arrangement, }\n  outlines              = await @fetch_outlines_fast cfg\n  return { arrangement, outlines, }\n\n\n#===========================================================================================================\n# DEMO\n#-----------------------------------------------------------------------------------------------------------\n@demo_arranging_and_outlining_text = ( cfg ) ->\n  HB                    = @\n  HB.ensure_harfbuzz_version()\n  font                  =\n    path:                 'EBGaramond12-Italic.otf'\n    features:             'liga,clig,dlig,hlig'\n  font.path             = PATH.resolve PATH.join __dirname, '../fonts', font.path\n  # text                  = \"A glyph ffi shaping\\nagffix谷\"\n  # text                  = \"A abc\\nabc ffl ffi ct 谷 Z\"\n  # text                  = \"AThctZ\"\n  text                  = \"AxZ\"\n  cfg                   = { font, text, }\n  arrangement           = await HB.arrange_text cfg\n  #.........................................................................................................\n  ### At this point we could check outline DB for missing outlines using the Glyf Names in `arrangement`.\n\n  If all outlines are found then we're fine to procede; in case one or more outlines are missing, we have to\n  typeset *the entire text* (unfortunately) again using `hb-view` with SVG output. We update `cfg` with\n  `arrangement` because only then it is possible to match outlines and Glyph Names. ###\n  #.........................................................................................................\n  cfg                   = { cfg..., arrangement, }\n  outlines              = await HB.fetch_outlines cfg\n  for d in arrangement\n    help d\n  for glyfname, outline of outlines\n    d = outline[ ... 100 ] + '…'\n    urge { glyfname, d, }\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # @demo_arranging_and_outlining_text()\n  # @ensure_harfbuzz_version()\n  # help await @shape_text { font: { path: '/home/flow/jzr/glyphshapes-and-typesetting-with-harfbuzz/fonts/EBGaramond12-Italic.otf', features: 'liga,clig,dlig,hlig' }, text: 'AxZ' }\n  help await @shape_text { font: { path: 'nosuchfile', features: 'liga,clig,dlig,hlig' }, text: 'AxZ' }\n\n"
  ]
}