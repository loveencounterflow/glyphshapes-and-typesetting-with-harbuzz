{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-fontkit.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DEMO-OPENTYPEJS'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\n@types                    = require './types'\n{ isa\n  validate }              = @types.export()\nFK                        = require 'fontkit'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@fkfont_from_path = ( path ) -> FK.openSync path ### could use async ###\n\n#-----------------------------------------------------------------------------------------------------------\n@shape_text = ( fkfont, text ) ->\n  R = {}\n  glyfrun = fkfont.layout text\n  if fkfont.unitsPerEm is 1000\n    for glyf in glyfrun.glyphs\n      R[ glyf.id ] = glyf.path.toSVG()\n  else\n    for glyf in glyfrun.glyphs\n      R[ glyf.id ] = ( glyf.getScaledPath 1000 ).toSVG()\n  return null\n\n\n#===========================================================================================================\n# DEMO SHAPE TEXT\n#-----------------------------------------------------------------------------------------------------------\n@demo_shape_text = ->\n  resolve_path  = ( path ) -> PATH.resolve PATH.join __dirname, '../fonts', path\n  features      = { liga: true, clig: true, dlig: true, hlig: true, }\n  # path          = 'EBGaramond08-Italic.otf'\n  path          = 'FZKaiT.TTF'\n  path          = resolve_path path\n  # open a font synchronously\n  fkfont        = FK.openSync path\n  whisper fkfont.availableFeatures\n  whisper fkfont.variationAxes\n  whisper fkfont.unitsPerEm\n  scale_factor = 1000 / fkfont.unitsPerEm\n  # layout a string, using default shaping features.\n  # returns a GlyphRun, describing glyphs and positions.\n  glyfrun       = fkfont.layout 'xffix', features\n  # get an SVG path for a glyph\n  urge ( k for k of glyfrun )\n  for glyf in glyfrun.glyphs\n    # font.widthOfGlyph glyf.id\n    # info ( k for k of glyf )\n    info ( CND.yellow glyf.id ), CND.steel glyf.path.toSVG()[ .. 100 ]\n    info glyf.bbox\n    info glyf.advanceWidth\n    info glyf.advanceWidth * scale_factor\n    ### should use this method unless `fkfont.unitsPerEm` is 1000: ###\n    urge ( glyf.getScaledPath 1000 ).toSVG()\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  await @demo_shape_text()\n\n\n\n\n"
  ]
}