{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-opentypejs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DEMO-OPENTYPEJS'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\n@types                    = require './types'\n{ isa\n  validate }              = @types.export()\nOTJS                      = require 'opentype.js'\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# __demo_outline = ( filename, font, text_shape ) ->\n#   HBJS       ?= await require harfbuzzjs_path\n#   cursor_x  = 0\n#   cursor_y  = 0\n#   R         = []\n#   for glyph in text_shape\n#     gid       = glyph.g\n#     delta_x   = glyph.ax\n#     dx        = glyph.dx\n#     dy        = glyph.dy\n#     svg_path  = font.glyphToPath gid\n#     debug '^3234234^', ( CND.yellow filename ), ( CND.lime gid ), ( CND.steel ( rpr svg_path )[ .. 100 ] )\n#     R.push svg_path\n#     # # You need to supply this bit\n#     # drawAGlyph(svg_path, cursor_x + dx, dy)\n#     cursor_x += delta_x\n#   return R\n\n# #-----------------------------------------------------------------------------------------------------------\n# __demo_text_shape = ( path, text ) ->\n#   HBJS       ?= await require harfbuzzjs_path\n#   filename  = PATH.basename path\n#   font_blob = new Uint8Array FS.readFileSync path\n#   blob      = HBJS.createBlob font_blob\n#   face      = HBJS.createFace blob, 0\n#   font      = HBJS.createFont face\n#   ### NOTE Units per em. Optional; taken from font if not given ###\n#   font.setScale 1000, 1000\n#   buffer    = HBJS.createBuffer()\n#   try\n#     buffer.addText text\n#     buffer.guessSegmentProperties()\n#     ### NOTE optional as can be set by guessSegmentProperties also: ###\n#     # buffer.setDirection 'ltr'\n#     ### TAINT silently discards unknown features ###\n#     features = { kern: true, liga: true, xxx: true, }\n#     HBJS.shape font, buffer, features\n#     R = buffer.json font\n#     demo_outline filename, font, R\n#     # bbox = xmin + ' ' + ymin + ' ' + width + ' ' + height;\n#     # \"<svg xmlns='http://www.w3.org/2000/svg' height='128' viewBox='#{bbox}'>\"\n#     # \"<path d='#{svg_path}'/></svg>\"\n#   finally\n#     buffer.destroy()\n#     font.destroy()\n#     face.destroy()\n#     blob.destroy()\n#   return R\n\n\n\n# #===========================================================================================================\n# # HELPERS\n# #-----------------------------------------------------------------------------------------------------------\n# @_hbjs_cache_from_path = ( HBJS, path ) ->\n#   font_blob = new Uint8Array FS.readFileSync path\n#   blob      = HBJS.createBlob font_blob\n#   face      = HBJS.createFace blob, 0\n#   hbjsfont  = HBJS.createFont face\n#   hbjsfont.setScale 1000, 1000\n#   return { font_blob, blob, face, hbjsfont, }\n\n\n\n# #===========================================================================================================\n# # ARRANGE\n# # #-----------------------------------------------------------------------------------------------------------\n# # @add_missing_outlines = ( me ) ->\n# #   HBJS               ?= await require harfbuzzjs_path\n# #   me.cache.hbjs      ?= @_hbjs_cache_from_path HBJS, me.path\n# #   { hbjs }            = me.cache\n# #   { features }        = me\n# #   me.outlines        ?= {}\n# #   #.........................................................................................................\n# #   # cursor_x  = 0\n# #   # cursor_y  = 0\n# #   R         = {}\n# #     gid       = glyph.g\n# #     # delta_x   = glyph.ax\n# #     # dx        = glyph.dx\n# #     # dy        = glyph.dy\n# #     svg_path  = hbjs.hbjsfont.glyphToPath gid\n# #     debug '^3234234^', ( CND.lime gid ), ( CND.steel ( rpr svg_path )[ .. 100 ] )\n# #     # R.push svg_path\n# #     # # You need to supply this bit\n# #     # drawAGlyph(svg_path, cursor_x + dx, dy)\n# #     # cursor_x += delta_x\n# #   #.........................................................................................................\n# #   return null\n\n\n# #===========================================================================================================\n# # ARRANGE\n# #-----------------------------------------------------------------------------------------------------------\n# ### TAINT add styling, font features ###\n# @arrange_text = ( me, text ) ->\n#   HBJS               ?= await require harfbuzzjs_path\n#   me.cache.hbjs      ?= @_hbjs_cache_from_path HBJS, me.path\n#   { hbjs }            = me.cache\n#   { features }        = me\n#   # debug '^333489^', ( k for k of HBJS )\n#   # debug '^333489^', ( k for k of hbjs.hbjsfont )\n#   # debug '^333489^', ( k for k of hbjs.buffer )\n#   me.outlines        ?= {}\n#   #.........................................................................................................\n#   ### TAINT can we keep existing buffer for new text? ###\n#   hbjs.buffer = HBJS.createBuffer()\n#   hbjs.buffer.addText text\n#   hbjs.buffer.guessSegmentProperties()\n#   HBJS.shape hbjs.hbjsfont, hbjs.buffer, features\n#   ### NOTE may change to arrangements as list ###\n#   me.arrangement = hbjs.buffer.json hbjs.hbjsfont\n#   #.........................................................................................................\n#   for glyph in me.arrangement\n#     me.outlines[ glyph.g ] ?= hbjs.hbjsfont.glyphToPath glyph.g\n#   #.........................................................................................................\n#   return null\n\n\n# #===========================================================================================================\n# # HIGH-LEVEL API\n# #-----------------------------------------------------------------------------------------------------------\n# @new_fontshaper = ( path, features = null ) ->\n#   R = { @types.defaults.hb_cfg..., path, features, cache: {}, }\n#   validate.hb_fontshaper R\n#   return R\n\n# #-----------------------------------------------------------------------------------------------------------\n# @destruct = ( me ) ->\n#   me.cache.hbjs?.buffer?.destroy()\n#   me.cache.hbjs?.hbjsfont?.destroy()\n#   me.cache.hbjs?.face?.destroy()\n#   me.cache.hbjs?.blob?.destroy()\n#   return null\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @fast_shape_text = ( me, text ) ->\n#   await @arrange_text         me, text\n#   # await @add_missing_outlines me\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@otfont_from_path = ( path ) -> await OTJS.load path\n\n#-----------------------------------------------------------------------------------------------------------\n@shape_text = ( otfont, text ) ->\n  R = {}\n  for glyph in otfont.stringToGlyphs text\n    continue if R[ glyph.index ]?\n    path              = glyph.getPath 0, 0, 1000\n    svg_pathdata      = path.toPathData 2\n    R[ glyph.index ]  = svg_pathdata\n  return R\n\n\n#===========================================================================================================\n# DEMO SHAPE TEXT\n#-----------------------------------------------------------------------------------------------------------\n@demo_shape_text = ->\n  resolve_path  = ( path ) -> PATH.resolve PATH.join __dirname, '../fonts', path\n  features      = { liga: true, clig: true, dlig: true, hlig: true, }\n  path          = 'EBGaramond08-Italic.otf'\n  path          = resolve_path path\n  otfont        = await OTJS.load path\n  for d in ( otfont.getPath 'a', 0, 150, 72 ).commands\n    debug d\n  for glyph in otfont.stringToGlyphs 'xffix'\n    help glyph\n    path = glyph.getPath 0, 0, 1000\n    urge path.toPathData 2\n  debug @shape_text otfont, 'xffix'\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  await @demo_shape_text()\n\n\n"
  ]
}