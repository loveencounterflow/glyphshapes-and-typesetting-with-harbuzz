{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-harfbuzz.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,QAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAd5B;;;EAgBA,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,MAAA,GAA4B,OAAA,CAAQ,QAAR;;EAC5B,KAAA,GAA4B,OAAA,CAAQ,SAAR,EAnB5B;;;EAuBA,QAAA,GACE;IAAA,OAAA,EAAS,IAAT;IACA,KAAA,EACE;MAAA,OAAA,EAAS;IAAT,CAFF;IAGA,QAAA,EACE;MAAA,MAAA,EAAQ;IAAR;EAJF,EAxBF;;;EA+BA,IAAC,CAAA,kBAAD,GAAsB,QAAA,CAAE,MAAF,CAAA;IACpB,IAAA,CAAA;IACA,IAA4D,uBAAA,IAAmB,MAAM,CAAC,MAAM,CAAC,MAAd,GAAuB,CAAtG;MAAA,IAAA,CAAK,4BAAL,EAAqC,GAAA,CAAI,MAAM,CAAC,MAAX,CAArC,EAAA;;IACA,IAA4D,uBAAA,IAAmB,MAAM,CAAC,MAAM,CAAC,MAAd,GAAuB,CAAtG;MAAA,IAAA,CAAK,4BAAL,EAAqC,GAAA,CAAI,MAAM,CAAC,MAAX,CAArC,EAAA;;IACA,IAAA,CAAA;AACA,WAAO;EALa,EA/BtB;;;EAuCA,IAAC,CAAA,uBAAD,GAA2B,QAAA,CAAA,CAAA;AAC3B,QAAA,GAAA,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA;IAAE,IAAA,GAAO,CACL,UADK,EAEL,SAFK,EAAT;;IAIE,KAAA,sCAAA;;MACE,MAAA,GAAS,KAAK,CAAC,IAAN,CAAW,CAAA,CAAA,CAAG,GAAH,CAAA,UAAA,CAAX,EAA+B;QAAE,MAAA,EAAU,CAAI,QAAQ,CAAC,KAAK,CAAC;MAA/B,CAA/B,EAAb;;MAEI,IAAO,MAAM,CAAC,IAAP,KAAe,CAAtB;QACE,IAAC,CAAA,kBAAD,CAAoB,MAApB;QACA,MAAM,IAAI,KAAJ,CAAU,8HAAV,EAFR;;MAGA,OAAA,GAAU,MAAA,CAAA,CAAA,CAAA,CAAA,CAAQ,GAAR,CAAA,+CAAA,CAAA,EALd;;MAOI,IAAO,8CAAP;QACE,IAAC,CAAA,kBAAD,CAAoB,MAApB;QACA,MAAM,IAAI,KAAJ,CAAU,8HAAV,EAFR;OAPJ;;MAWI,KAAO,MAAM,CAAC,SAAP,CAAiB,KAAK,CAAC,MAAM,CAAC,OAA9B,EAAuC,QAAQ,CAAC,QAAQ,CAAC,MAAzD,CAAP;QACE,IAAC,CAAA,kBAAD,CAAoB,MAApB;QACA,MAAM,IAAI,KAAJ,CAAU,CAAA,kCAAA,CAAA,CAAqC,GAAA,CAAI,GAAJ,CAArC,CAAA,SAAA,CAAA,CAAwD,GAAA,CAAI,KAAK,CAAC,MAAM,CAAC,OAAjB,CAAxD,CAAA,WAAA,CAAA,CAA8F,GAAA,CAAI,QAAQ,CAAC,QAAQ,CAAC,MAAtB,CAA9F,CAAA,CAAV,EAFR;;MAGA,IAA+D,QAAQ,CAAC,OAAxE;QAAA,OAAA,CAAQ,CAAA,QAAA,CAAA,CAAW,GAAX,CAAA,SAAA,CAAA,CAA0B,KAAK,CAAC,MAAM,CAAC,OAAvC,CAAA,GAAA,CAAR,EAAA;;IAfF,CAJF;;AAqBE,WAAO;EAtBkB,EAvC3B;;;EAiEA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA;AAClC,UAAA;MAAE,EAAA,GAAK;aACL,EAAE,CAAC,uBAAH,CAAA;IAFgC,CAAA,IAAlC;;AAjEA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DEMO-HARFBUZZ'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nSEMVER                    = require 'semver'\nSHELL                     = require 'shelljs'\n\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults =\n  verbose: true\n  shell:\n    verbose: false\n  harfbuzz:\n    semver: '^2.7.4'\n\n#-----------------------------------------------------------------------------------------------------------\n@_show_shell_output = ( output ) ->\n  echo()\n  help '^demo-harfbuzz@87^ stdout:', ( rpr output.stdout ) if output.stdout? and output.stdout.length > 0\n  warn '^demo-harfbuzz@87^ stderr:', ( rpr output.stderr ) if output.stderr? and output.stderr.length > 0\n  echo()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@ensure_harfbuzz_version = ->\n  cmds = [\n    'hb-shape'\n    'hb-view' ]\n  #.........................................................................................................\n  for cmd in cmds\n    output = SHELL.exec \"#{cmd} --version\", { silent: ( not defaults.shell.verbose ), }\n    #.......................................................................................................\n    unless output.code is 0\n      @_show_shell_output output\n      throw new Error \"^demo-harfbuzz@87^ ensure that harfbuzz is available on the path (recommendation: `homebrew install harfbuzz` on Linux, Mac)\"\n    pattern = /// ^ #{cmd} \\s+ \\(HarfBuzz\\) \\s+ (?<version>[0-9a-z.]+) \\n ///\n    #.......................................................................................................\n    unless ( match = output.stdout.match pattern )?\n      @_show_shell_output output\n      throw new Error \"^demo-harfbuzz@87^ ensure that harfbuzz is available on the path (recommendation: `homebrew install harfbuzz` on Linux, Mac)\"\n    #.......................................................................................................\n    unless SEMVER.satisfies match.groups.version, defaults.harfbuzz.semver\n      @_show_shell_output output\n      throw new Error \"^demo-harfbuzz@87^ found HarfBuzz #{rpr cmd} version #{rpr match.groups.version}, expected #{rpr defaults.harfbuzz.semver}\"\n    whisper \"^33787^ #{cmd} version #{match.groups.version} OK\" if defaults.verbose\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  HB = @\n  HB.ensure_harfbuzz_version()\n\n"
  ]
}