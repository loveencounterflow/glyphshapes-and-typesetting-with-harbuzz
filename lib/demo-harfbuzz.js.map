{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-harfbuzz.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DEMO-HARFBUZZ'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nSEMVER                    = require 'semver'\nSHELL                     = require 'shelljs'\nSP                        = require 'steampipes'\n{ $\n  $async\n  $watch\n  $show\n  $drain }                = SP.export()\nDATOM                     = require 'datom'\n{ new_datom\n  freeze    }             = DATOM.export()\n{ spawn }                 = require 'child_process'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate }              = types.export()\n\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults =\n  internal:\n    verbose: true\n    shell:\n      verbose: false\n    harfbuzz:\n      semver: '^2.7.4'\n  hb_settings:\n    font_path:    null\n    text:         null\n    features:     null\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'hb_settings', tests:\n  \"x is an object\":                 ( x ) -> @isa.object          x\n  \"x.font_path is a text\":          ( x ) -> @isa.text            x.font_path\n  \"x.text is a text\":               ( x ) -> @isa.text            x.text\n  \"x.features is an optional text\": ( x ) -> @isa_optional.text   x.features\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_show_shell_output = ( output ) ->\n  echo()\n  help '^demo-harfbuzz@87^ stdout:', ( rpr output.stdout ) if output.stdout? and output.stdout.length > 0\n  warn '^demo-harfbuzz@87^ stderr:', ( rpr output.stderr ) if output.stderr? and output.stderr.length > 0\n  echo()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@ensure_harfbuzz_version = ->\n  cmds = [\n    'hb-shape'\n    'hb-view' ]\n  #.........................................................................................................\n  for cmd in cmds\n    output = SHELL.exec \"#{cmd} --version\", { silent: ( not defaults.internal.shell.verbose ), }\n    #.......................................................................................................\n    unless output.code is 0\n      @_show_shell_output output\n      throw new Error \"^demo-harfbuzz@87^ ensure that harfbuzz is available on the path (recommendation: `homebrew install harfbuzz` on Linux, Mac)\"\n    pattern = /// ^ #{cmd} \\s+ \\(HarfBuzz\\) \\s+ (?<version>[0-9a-z.]+) \\n ///\n    #.......................................................................................................\n    unless ( match = output.stdout.match pattern )?\n      @_show_shell_output output\n      throw new Error \"^demo-harfbuzz@87^ ensure that harfbuzz is available on the path (recommendation: `homebrew install harfbuzz` on Linux, Mac)\"\n    #.......................................................................................................\n    unless SEMVER.satisfies match.groups.version, defaults.internal.harfbuzz.semver\n      @_show_shell_output output\n      throw new Error \"^demo-harfbuzz@87^ found HarfBuzz #{rpr cmd} version #{rpr match.groups.version}, expected #{rpr defaults.internal.harfbuzz.semver}\"\n    #.......................................................................................................\n    whisper \"^33787^ #{cmd} version #{match.groups.version} OK\" if defaults.internal.verbose\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$extract_hbshape_positioning = ( S ) ->\n  return $ ( d, send ) ->\n    return null unless d.$key is '^stdout'\n    return null unless d.$value?\n    ### NOTE first try simple format, then format that includes line numbers ###\n    unless ( match = d.$value.match /^(?<positions>\\[.*\\])$/ )?\n      return null unless ( match = d.$value.match /^(?<lnr>[0-9]+):\\s+(?<positions>\\[.*\\])$/ )?\n    send JSON.parse match.groups.positions\n\n#-----------------------------------------------------------------------------------------------------------\n@$convert_shape_datoms = ( S ) ->\n  symbol_id     = null\n  path_start    = '<path style=\"stroke:none;\" d=\"'\n  path_end      = ' \"/>'\n  use_pattern   = /^\\s*<use xlink:href=\"#(?<symbol_id>[^\"]+)\" x=\"(?<dx>[^\"]+)\" y=\"(?<dy>[^\"]+)\"\\/>/\n  use_idx       = -1\n  return $ ( d, send ) ->\n    return null unless d.$key is '^stdout'\n    return null unless ( value = d.$value )?\n    return null if ( value.match /^<\\// )?\n    return null if value is '<defs>'\n    return null if value is '<g>'\n    return null if value.startsWith '<?xml '\n    return null if value.startsWith '<g '\n    return null if value.startsWith '<rect ' ### NOTE could extract visual text extent from background box ###\n    #.......................................................................................................\n    if value.startsWith '<svg '\n      ### NOTE may want to extract width, height, viewBox ###\n      return null\n    #.......................................................................................................\n    if value.startsWith '<symbol '\n      ### TAINT validate that symbol_id was found ###\n      symbol_id = value.replace /^.*\\sid=\"([^\"]+)\".*$/, '$1'\n      return null\n    #.......................................................................................................\n    if value is '<path style=\"stroke:none;\" d=\"\"/>'\n      # warn '^7767^', d\n      # send new_datom '^space'\n      send new_datom '^glyfpath', { symbol_id, svgpath: null, gname: 'space', }\n      return null\n    #.......................................................................................................\n    if ( value.startsWith path_start ) and ( value.endsWith path_end )\n      svgpath = value[ path_start.length ... value.length - path_end.length ]\n      send new_datom '^glyfpath', { symbol_id, svgpath, }\n      return null\n    #.......................................................................................................\n    if ( match = value.match use_pattern )?\n      use_idx++\n      data = match.groups\n      if S.arrangement?\n        data.gname = S.arrangement[ use_idx ]?.g ? null\n      send new_datom '^use', data\n      return null\n    #.......................................................................................................\n    throw new Error \"^demo-harfbuzz@87^ unexpected SVG element #{rpr value}\"\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_positionings = ( S ) ->\n  last      = Symbol 'last'\n  count     = 0\n  return $watch { last, }, ( d ) ->\n    if d is last\n      urge CND.reverse \"found #{count} glyph positionings\"\n      return null\n    return null unless isa.list d\n    count += d.length\n    for shape in d\n      info shape\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_usage_counts = ( S ) ->\n  last      = Symbol 'last'\n  count     = 0\n  return $watch { last, }, ( d ) ->\n    if d is last\n      urge CND.reverse \"found #{count} usage tags\"\n      return null\n    return null unless d.$key is '^use'\n    count++\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_svg = ( S ) ->\n  last      = Symbol 'last'\n  collector = []\n  return $watch { last, }, ( d ) ->\n    if d is last\n      urge '\\n' + collector.join '\\n'\n      return null\n    return null unless d.$key is '^stdout'\n    return null unless ( value = d.$value )?\n    collector.push value\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT add styling, font features ###\n@arrange_text = ( settings ) -> new Promise ( resolve, reject ) =>\n  settings      = { defaults.hb_settings..., settings..., }\n  validate.hb_settings settings\n  { text\n    font_path\n    features }  = settings\n  #.........................................................................................................\n  parameters    = []\n  parameters.push '--output-format=json'\n  parameters.push '--font-size=1000'\n  parameters.push \"--features=#{features}\" if features?\n    # '--no-glyph-names' ### NOTE when active, output glyf IDs instead of glyph names ###\n    # '--show-extents'\n    # '--show-flags'\n    # '--verbose'\n  parameters.push font_path\n  parameters.push text\n  #.........................................................................................................\n  cp              = spawn 'hb-shape', parameters\n  stream_settings = { bare: true, }\n  source          = SP.source_from_child_process cp, stream_settings\n  S               = freeze { font_path, text, }\n  pipeline        = []\n  pipeline.push source\n  pipeline.push SP.$split_channels()\n  pipeline.push $watch ( d ) => whisper '^33344^', d\n  pipeline.push @$extract_hbshape_positioning S\n  pipeline.push @$show_positionings           S\n  pipeline.push $drain ( R ) -> urge \"arrange_text finished\"; resolve R.flat Infinity\n  SP.pull pipeline...\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT add styling, font features ###\n#-----------------------------------------------------------------------------------------------------------\n@fetch_outlines = ( settings, arrangement = null ) ->\n  settings      = { defaults.hb_settings..., settings..., }\n  validate.hb_settings settings\n  return @_fetch_outlines settings, arrangement\n\n#-----------------------------------------------------------------------------------------------------------\n@_fetch_outlines = ( settings, arrangement = null ) -> new Promise ( resolve, reject ) =>\n  { text\n    font_path\n    features }  = settings\n  #.........................................................................................................\n  parameters    = []\n  parameters.push '--output-format=svg'\n  parameters.push '--font-size=1000'\n  parameters.push \"--features=#{features}\" if features?\n  parameters.push font_path\n  parameters.push text\n    # '--show-extents'\n    # '--show-flags'\n    # '--verbose'\n  #.........................................................................................................\n  cp              = spawn 'hb-view', parameters\n  stream_settings = { bare: true, }\n  source          = SP.source_from_child_process cp, stream_settings\n  S               = freeze { font_path, text, arrangement, }\n  pipeline        = []\n  pipeline.push source\n  pipeline.push SP.$split_channels()\n  # pipeline.push @$show_svg              S\n  pipeline.push @$convert_shape_datoms  S\n  pipeline.push $show()\n  pipeline.push @$show_usage_counts     S\n  pipeline.push $drain -> urge \"fetch_outlines finished\"; resolve()\n  SP.pull pipeline...\n  #.........................................................................................................\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  HB = @\n  HB.ensure_harfbuzz_version()\n  font_path = 'EBGaramond12-Italic.otf'\n  font_path = PATH.resolve PATH.join __dirname, '../fonts', font_path\n  text      = \"A glyph ffi shaping\\nagffix谷\"\n  text      = \"A abc\\nabc ffl ffi ct 谷 Z\"\n  text      = \"AThctZ\"\n  features  = 'liga,clig,dlig,hlig'\n  settings  = { font_path, text, features, }\n  help '^3334^', arrangement = await HB.arrange_text settings\n  ### TAINT make arrangement part of settings? ###\n  await HB.fetch_outlines settings, arrangement\n  # debug '^445^', ( k for k of SP ).sort()\n\n"
  ]
}