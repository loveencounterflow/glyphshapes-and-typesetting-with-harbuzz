{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-opentypejs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DEMO-OPENTYPEJS'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\n@types                    = require './types'\n{ isa\n  validate }              = @types.export()\nOTJS                      = require 'opentype.js'\n\nwarn CND.reverse \"opentype.js probably does not provide proper shaping beyond Latin ligatures\"\n\n\n#-----------------------------------------------------------------------------------------------------------\n@otfont_from_path = ( path ) -> await OTJS.load path\n\n#-----------------------------------------------------------------------------------------------------------\n@shape_text = ( otfont, text ) ->\n  return otfont.stringToGlyphs text\n    # continue if R[ glyph.index ]?\n    # path              = glyph.getPath 0, 0, 1000\n    # svg_pathdata      = path.toPathData 2\n    # R[ glyph.index ]  = svg_pathdata\n  # return R\n\n\n#===========================================================================================================\n# DEMO SHAPE TEXT\n#-----------------------------------------------------------------------------------------------------------\n@demo_shape_text = ->\n  resolve_path  = ( path ) -> PATH.resolve PATH.join __dirname, '../fonts', path\n  features      = { liga: true, clig: true, dlig: true, hlig: true, }\n  path          = 'EBGaramond08-Italic.otf'\n  path          = resolve_path path\n  otfont        = await OTJS.load path\n  for d in ( otfont.getPath 'a', 0, 150, 72 ).commands\n    debug d\n  for glyph in otfont.stringToGlyphs 'xffix'\n    help glyph\n    path = glyph.getPath 0, 0, 1000\n    urge path.toPathData 2\n  debug @shape_text otfont, 'xffix'\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  await @demo_shape_text()\n\n\n"
  ]
}