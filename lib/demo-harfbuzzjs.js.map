{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-harfbuzzjs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERPLOT/SCRATCH'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nHB                        = null\n\nwarn CND.reverse \"* harfbuzzjs doesn't have font feature switches (python version has them)\"\n# warn()\n# warn CND.reverse \"this code has been moved to jzr/font-outlines-as-svg\"\n# process.exit 1\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_text_shape = ( font_blob, text ) ->\n  blob      = HB.createBlob font_blob\n  face      = HB.createFace blob, 0\n  font      = HB.createFont face\n  ### NOTE Units per em. Optional; taken from font if not given ###\n  font.setScale 1000, 1000\n  buffer    = HB.createBuffer()\n  try\n    buffer.addText text\n    buffer.guessSegmentProperties()\n    ### NOTE optional as can be set by guessSegmentProperties also: ###\n    # buffer.setDirection 'ltr'\n    ### TAINT silently discards unknown features ###\n    features = { kern: true, liga: true, xxx: true, }\n    HB.shape font, buffer, features\n    R = buffer.json font\n    debug '^43242^', demo_outline font, R\n    # bbox = xmin + ' ' + ymin + ' ' + width + ' ' + height;\n    # \"<svg xmlns='http://www.w3.org/2000/svg' height='128' viewBox='#{bbox}'>\"\n    # \"<path d='#{svg_path}'/></svg>\"\n  finally\n    buffer.destroy()\n    font.destroy()\n    face.destroy()\n    blob.destroy()\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_outline = ( font, text_shape ) ->\n  cursor_x  = 0\n  cursor_y  = 0\n  R         = []\n  for glyph in text_shape\n    gid       = glyph.g\n    delta_x   = glyph.ax\n    dx        = glyph.dx\n    dy        = glyph.dy\n    svg_path  = font.glyphToPath gid\n    debug '^3234234^', gid, rpr svg_path\n    R.push svg_path\n    # # You need to supply this bit\n    # drawAGlyph(svg_path, cursor_x + dx, dy)\n    cursor_x += delta_x\n  return R\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  f = ->\n    # path                = 'unifraktur/UnifrakturMaguntia16.ttf'\n    # path                = 'SourceHanSans-Bold003.ttf'\n    # path                = 'HanaMinExB.otf'\n    path                = 'FZKaiT.TTF'\n    # path                = 'EBGaramond08-Regular.otf'\n    path                = PATH.join __dirname, '../fonts', path\n    path                = PATH.resolve path\n    font_blob           = new Uint8Array FS.readFileSync path\n    # HB                  = await require 'harfbuzzjs'\n    HB                  = await require '../../../3rd-party-repos/harfbuzzjs'\n    # debug '^43435^', ( k for k of HB )\n    # text                = 'Just Text.做過很多'\n    text                = 'a'\n    for d in demo_text_shape font_blob, text\n      urge d\n    return null\n  await f()\n\n"
  ]
}