{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-harfbuzzjs.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,cAAA,EAAA,iBAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,eAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAd5B;;;EAgBA,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,IAAC,CAAA,KAAD,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,CAAA,GAC4B,IAAC,CAAA,KAAK,CAAC,MAAP,CAAA,CAD5B;;EAEA,IAAA,GAA8B;;EAC9B,eAAA,GAA4B;;EAE5B,IAAA,CAAK,GAAG,CAAC,OAAJ,CAAY,0CAAZ,CAAL,EAxBA;;;EA4BA,cAAA,GAAiB,MAAA,QAAA,CAAE,QAAF,EAAY,IAAZ,EAAkB,UAAlB,CAAA;AACjB,QAAA,CAAA,EAAA,QAAA,EAAA,QAAA,EAAA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA;;MAAE,OAAc,CAAA,MAAM,OAAA,CAAQ,eAAR,CAAN;;IACd,QAAA,GAAY;IACZ,QAAA,GAAY;IACZ,CAAA,GAAY;IACZ,KAAA,4CAAA;;MACE,GAAA,GAAY,KAAK,CAAC;MAClB,OAAA,GAAY,KAAK,CAAC;MAClB,EAAA,GAAY,KAAK,CAAC;MAClB,EAAA,GAAY,KAAK,CAAC;MAClB,QAAA,GAAY,IAAI,CAAC,WAAL,CAAiB,GAAjB;MACZ,KAAA,CAAM,WAAN,EAAqB,GAAG,CAAC,MAAJ,CAAW,QAAX,CAArB,EAA8C,GAAG,CAAC,IAAJ,CAAS,GAAT,CAA9C,EAAgE,GAAG,CAAC,KAAJ,CAAU,CAAE,GAAA,CAAI,QAAJ,CAAF,CAAgB,cAA1B,CAAhE;MACA,CAAC,CAAC,IAAF,CAAO,QAAP,EANJ;;;MASI,QAAA,IAAY;IAVd;AAWA,WAAO;EAhBQ,EA5BjB;;;EA+CA,iBAAA,GAAoB,MAAA,QAAA,CAAE,IAAF,EAAQ,IAAR,CAAA;AACpB,QAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,IAAA,EAAA;;MAAE,OAAc,CAAA,MAAM,OAAA,CAAQ,eAAR,CAAN;;IACd,QAAA,GAAY,IAAI,CAAC,QAAL,CAAc,IAAd;IACZ,SAAA,GAAY,IAAI,UAAJ,CAAe,EAAE,CAAC,YAAH,CAAgB,IAAhB,CAAf;IACZ,IAAA,GAAY,IAAI,CAAC,UAAL,CAAgB,SAAhB;IACZ,IAAA,GAAY,IAAI,CAAC,UAAL,CAAgB,IAAhB,EAAsB,CAAtB;IACZ,IAAA,GAAY,IAAI,CAAC,UAAL,CAAgB,IAAhB,EALd;;IAOE,IAAI,CAAC,QAAL,CAAc,IAAd,EAAoB,IAApB;IACA,MAAA,GAAY,IAAI,CAAC,YAAL,CAAA;AACZ;MACE,MAAM,CAAC,OAAP,CAAe,IAAf;MACA,MAAM,CAAC,sBAAP,CAAA,EADJ;;;;MAKI,QAAA,GAAW;QAAE,IAAA,EAAM,IAAR;QAAc,IAAA,EAAM,IAApB;QAA0B,GAAA,EAAK;MAA/B;MACX,IAAI,CAAC,KAAL,CAAW,IAAX,EAAiB,MAAjB,EAAyB,QAAzB;MACA,CAAA,GAAI,MAAM,CAAC,IAAP,CAAY,IAAZ;MACJ,YAAA,CAAa,QAAb,EAAuB,IAAvB,EAA6B,CAA7B,EATF;KAAA;;;;MAcE,MAAM,CAAC,OAAP,CAAA;MACA,IAAI,CAAC,OAAL,CAAA;MACA,IAAI,CAAC,OAAL,CAAA;MACA,IAAI,CAAC,OAAL,CAAA,EAjBF;;AAkBA,WAAO;EA5BW,EA/CpB;;;;;EAkFA,IAAC,CAAA,qBAAD,GAAyB,QAAA,CAAE,IAAF,EAAQ,IAAR,CAAA;AACzB,QAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA;IAAE,SAAA,GAAY,IAAI,UAAJ,CAAe,EAAE,CAAC,YAAH,CAAgB,IAAhB,CAAf;IACZ,IAAA,GAAY,IAAI,CAAC,UAAL,CAAgB,SAAhB;IACZ,IAAA,GAAY,IAAI,CAAC,UAAL,CAAgB,IAAhB,EAAsB,CAAtB;IACZ,QAAA,GAAY,IAAI,CAAC,UAAL,CAAgB,IAAhB;IACZ,QAAQ,CAAC,QAAT,CAAkB,IAAlB,EAAwB,IAAxB;AACA,WAAO,CAAE,SAAF,EAAa,IAAb,EAAmB,IAAnB,EAAyB,QAAzB;EANgB,EAlFzB;;;;;EA+FA,IAAC,CAAA,oBAAD,GAAwB,MAAA,QAAA,CAAE,EAAF,CAAA;AACxB,QAAA,CAAA,EAAA,IAAA,EAAA,QAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;;MAAE,OAAsB,CAAA,MAAM,OAAA,CAAQ,eAAR,CAAN;;;UACd,CAAC,OAAa,IAAC,CAAA,qBAAD,CAAuB,IAAvB,EAA6B,EAAE,CAAC,IAAhC;;IACtB,CAAA,CAAE,IAAF,CAAA,GAAsB,EAAE,CAAC,KAAzB;IACA,CAAA,CAAE,QAAF,CAAA,GAAsB,EAAtB;;MACA,EAAE,CAAC,WAAmB,CAAA;KAJxB;;;;IAQE,CAAA,GAAY,CAAA;AACZ;IAAA,KAAA,qCAAA;;MACE,GAAA,GAAY,KAAK,CAAC,EAAtB;;;;MAII,QAAA,GAAY,IAAI,CAAC,QAAQ,CAAC,WAAd,CAA0B,GAA1B;MACZ,KAAA,CAAM,WAAN,EAAqB,GAAG,CAAC,IAAJ,CAAS,GAAT,CAArB,EAAuC,GAAG,CAAC,KAAJ,CAAU,CAAE,GAAA,CAAI,QAAJ,CAAF,CAAgB,cAA1B,CAAvC;IANF,CATF;;;;;;AAqBE,WAAO;EAtBe,EA/FxB;;;;;;EA4HA,IAAC,CAAA,YAAD,GAAgB,MAAA,QAAA,CAAE,EAAF,EAAM,IAAN,CAAA;AAChB,QAAA,IAAA,EAAA,QAAA,EAAA;;MAAE,OAAsB,CAAA,MAAM,OAAA,CAAQ,eAAR,CAAN;;;UACd,CAAC,OAAa,IAAC,CAAA,qBAAD,CAAuB,IAAvB,EAA6B,EAAE,CAAC,IAAhC;;IACtB,CAAA,CAAE,IAAF,CAAA,GAAsB,EAAE,CAAC,KAAzB;IACA,CAAA,CAAE,QAAF,CAAA,GAAsB,EAAtB,EAHF;;;IAME,IAAI,CAAC,MAAL,GAAc,IAAI,CAAC,YAAL,CAAA;IACd,IAAI,CAAC,MAAM,CAAC,OAAZ,CAAoB,IAApB;IACA,IAAI,CAAC,MAAM,CAAC,sBAAZ,CAAA;IACA,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,QAAhB,EAA0B,IAAI,CAAC,MAA/B,EAAuC,QAAvC,EATF;;IAWE,EAAE,CAAC,WAAH,GAAiB,IAAI,CAAC,MAAM,CAAC,IAAZ,CAAiB,IAAI,CAAC,QAAtB,EAXnB;;;AAcE,WAAO;EAfO,EA5HhB;;;;;EAiJA,IAAC,CAAA,cAAD,GAAkB,QAAA,CAAE,IAAF,EAAQ,WAAW,IAAnB,CAAA;AAClB,QAAA;IAAE,CAAA,GAAI;MAAE,GAAA,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,MAAlB;MAA6B,IAA7B;MAAmC,QAAnC;MAA6C,KAAA,EAAO,CAAA;IAApD;IACJ,QAAQ,CAAC,aAAT,CAAuB,CAAvB;AACA,WAAO;EAHS,EAjJlB;;;EAuJA,IAAC,CAAA,QAAD,GAAY,QAAA,CAAE,EAAF,CAAA;AACZ,QAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA;;;YAAuB,CAAE,OAAvB,CAAA;;;;;YACuB,CAAE,OAAzB,CAAA;;;;;YACmB,CAAE,OAArB,CAAA;;;;;YACmB,CAAE,OAArB,CAAA;;;AACA,WAAO;EALG,EAvJZ;;;EA+JA,IAAC,CAAA,UAAD,GAAc,QAAA,CAAE,EAAF,EAAM,IAAN,CAAA;IACZ,IAAC,CAAA,KAAK,CAAC,QAAQ,CAAC,aAAhB,CAA8B,EAA9B;AACA,WAAO,IAAC,CAAA,eAAD,CAAiB,EAAjB,EAAqB,IAArB;EAFK,EA/Jd;;;EAoKA,IAAC,CAAA,eAAD,GAAmB,MAAA,QAAA,CAAE,EAAF,EAAM,IAAN,CAAA;IACjB,MAAM,IAAC,CAAA,YAAD,CAAsB,EAAtB,EAA0B,IAA1B;IACN,MAAM,IAAC,CAAA,oBAAD,CAAsB,EAAtB;AACN,WAAO;EAHU,EApKnB;;;;;EA6KA,IAAC,CAAA,eAAD,GAAmB,MAAA,QAAA,CAAA,CAAA;AACnB,QAAA,EAAA,EAAA,CAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAA,YAAA,EAAA;IAAE,EAAA,GAAgB,KAAlB;;IAEE,YAAA,GAAgB,QAAA,CAAE,IAAF,CAAA;aAAY,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,UAArB,EAAiC,IAAjC,CAAb;IAAZ;IAChB,QAAA,GAAgB;MAAE,IAAA,EAAM,IAAR;MAAc,IAAA,EAAM,IAApB;MAA0B,IAAA,EAAM,IAAhC;MAAsC,IAAA,EAAM;IAA5C;IAChB,IAAA,GAAgB,eAJlB;;;;IAKE,KAAA,GAAgB,CAId,YAJc,EALlB;;;;;;;;;;;;;;;IAyBE,KAAA,uCAAA;;MACE,KAAA,CAAM,SAAN,EAAiB,IAAjB;AACA;QACE,IAAA,GAAwB,YAAA,CAAa,IAAb;QACxB,EAAA,GAAwB,EAAE,CAAC,cAAH,CAAkB,IAAlB,EAAwB,QAAxB;QACxB,MAAM,EAAE,CAAC,UAAH,CAAc,EAAd,EAAkB,IAAlB;AACN;QAAA,KAAA,uCAAA;;UACE,IAAA,CAAK,CAAL;QADF,CAJF;OAAA;;QAQE,EAAE,CAAC,QAAH,CAAY,EAAZ,EARF;;IAFF,CAzBF;;AAqCE,WAAO;EAtCU,EA7KnB;;;EAwNA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,KAAA,CAAA,CAAA,GAAA;aAChC,CAAA,MAAM,IAAC,CAAA,eAAD,CAAA,CAAN;IADgC,CAAA,IAAlC;;AAxNA",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DEMO-HARFBUZZJS'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\n@types                    = require './types'\n{ isa\n  validate }              = @types.export()\nHBJS                        = null\nharfbuzzjs_path           = '../../../3rd-party-repos/harfbuzzjs'\n\nwarn CND.reverse \"harfbuzzjs doesn't support font features\"\n\n\n#-----------------------------------------------------------------------------------------------------------\n__demo_outline = ( filename, font, text_shape ) ->\n  HBJS       ?= await require harfbuzzjs_path\n  cursor_x  = 0\n  cursor_y  = 0\n  R         = []\n  for glyph in text_shape\n    gid       = glyph.g\n    delta_x   = glyph.ax\n    dx        = glyph.dx\n    dy        = glyph.dy\n    svg_path  = font.glyphToPath gid\n    debug '^3234234^', ( CND.yellow filename ), ( CND.lime gid ), ( CND.steel ( rpr svg_path )[ .. 100 ] )\n    R.push svg_path\n    # # You need to supply this bit\n    # drawAGlyph(svg_path, cursor_x + dx, dy)\n    cursor_x += delta_x\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n__demo_text_shape = ( path, text ) ->\n  HBJS       ?= await require harfbuzzjs_path\n  filename  = PATH.basename path\n  font_blob = new Uint8Array FS.readFileSync path\n  blob      = HBJS.createBlob font_blob\n  face      = HBJS.createFace blob, 0\n  font      = HBJS.createFont face\n  ### NOTE Units per em. Optional; taken from font if not given ###\n  font.setScale 1000, 1000\n  buffer    = HBJS.createBuffer()\n  try\n    buffer.addText text\n    buffer.guessSegmentProperties()\n    ### NOTE optional as can be set by guessSegmentProperties also: ###\n    # buffer.setDirection 'ltr'\n    ### TAINT silently discards unknown features ###\n    features = { kern: true, liga: true, xxx: true, }\n    HBJS.shape font, buffer, features\n    R = buffer.json font\n    demo_outline filename, font, R\n    # bbox = xmin + ' ' + ymin + ' ' + width + ' ' + height;\n    # \"<svg xmlns='http://www.w3.org/2000/svg' height='128' viewBox='#{bbox}'>\"\n    # \"<path d='#{svg_path}'/></svg>\"\n  finally\n    buffer.destroy()\n    font.destroy()\n    face.destroy()\n    blob.destroy()\n  return R\n\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\n@_hbjs_cache_from_path = ( HBJS, path ) ->\n  font_blob = new Uint8Array FS.readFileSync path\n  blob      = HBJS.createBlob font_blob\n  face      = HBJS.createFace blob, 0\n  hbjsfont  = HBJS.createFont face\n  hbjsfont.setScale 1000, 1000\n  return { font_blob, blob, face, hbjsfont, }\n\n\n\n#===========================================================================================================\n# ARRANGE\n#-----------------------------------------------------------------------------------------------------------\n@add_missing_outlines = ( me ) ->\n  HBJS               ?= await require harfbuzzjs_path\n  me.cache.hbjs      ?= @_hbjs_cache_from_path HBJS, me.path\n  { hbjs }            = me.cache\n  { features }        = me\n  me.outlines        ?= {}\n  #.........................................................................................................\n  # cursor_x  = 0\n  # cursor_y  = 0\n  R         = {}\n  for glyph in me.arrangement\n    gid       = glyph.g\n    # delta_x   = glyph.ax\n    # dx        = glyph.dx\n    # dy        = glyph.dy\n    svg_path  = hbjs.hbjsfont.glyphToPath gid\n    debug '^3234234^', ( CND.lime gid ), ( CND.steel ( rpr svg_path )[ .. 100 ] )\n    # R.push svg_path\n    # # You need to supply this bit\n    # drawAGlyph(svg_path, cursor_x + dx, dy)\n    # cursor_x += delta_x\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n# ARRANGE\n#-----------------------------------------------------------------------------------------------------------\n### TAINT add styling, font features ###\n@arrange_text = ( me, text ) ->\n  HBJS               ?= await require harfbuzzjs_path\n  me.cache.hbjs      ?= @_hbjs_cache_from_path HBJS, me.path\n  { hbjs }            = me.cache\n  { features }        = me\n  #.........................................................................................................\n  ### TAINT can we keep existing buffer for new text? ###\n  hbjs.buffer = HBJS.createBuffer()\n  hbjs.buffer.addText text\n  hbjs.buffer.guessSegmentProperties()\n  HBJS.shape hbjs.hbjsfont, hbjs.buffer, features\n  ### NOTE may change to arrangements as list ###\n  me.arrangement = hbjs.buffer.json hbjs.hbjsfont\n  # demo_outline filename, hbjs.hbjsfont, arrangement\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n# HIGH-LEVEL API\n#-----------------------------------------------------------------------------------------------------------\n@new_fontshaper = ( path, features = null ) ->\n  R = { @types.defaults.hb_cfg..., path, features, cache: {}, }\n  validate.hb_fontshaper R\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@destruct = ( me ) ->\n  me.cache.hbjs?.buffer?.destroy()\n  me.cache.hbjs?.hbjsfont?.destroy()\n  me.cache.hbjs?.face?.destroy()\n  me.cache.hbjs?.blob?.destroy()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@shape_text = ( me, text ) ->\n  @types.validate.hb_fontshaper me\n  return @fast_shape_text me, text\n\n#-----------------------------------------------------------------------------------------------------------\n@fast_shape_text = ( me, text ) ->\n  await @arrange_text         me, text\n  await @add_missing_outlines me\n  return null\n\n\n#===========================================================================================================\n# DEMO SHAPE TEXT\n#-----------------------------------------------------------------------------------------------------------\n@demo_shape_text = ->\n  HB            = @\n  # result.instance.exports.memory.grow(400); // each page is 64kb in size\n  resolve_path  = ( path ) -> PATH.resolve PATH.join __dirname, '../fonts', path\n  features      = { liga: true, clig: true, dlig: true, hlig: true, }\n  text          = 'abcdefABCDEF'\n  paths         = [\n    # 'unifraktur/UnifrakturMaguntia16.ttf'\n    # 'SourceHanSans-Bold003.ttf'\n    # # 'HanaMinExB.otf'\n    'FZKaiT.TTF'\n    # 'Ubuntu-R.ttf'\n    # 'DejaVuSansCondensed-Bold.ttf'\n    # 'NotoSerifJP/NotoSerifJP-Bold.otf'\n    # 'EBGaramond08-Italic.otf'\n    # 'EBGaramond08-Regular.otf'\n    # 'EBGaramond12-AllSC.otf'\n    # 'EBGaramond12-Italic.otf'\n    # 'EBGaramond12-Regular.otf'\n    # 'EBGaramond-InitialsF1.otf'\n    # 'EBGaramond-InitialsF2.otf'\n    # 'EBGaramond-Initials.otf'\n    # 'EBGaramondSC08-Regular.otf'\n    # 'EBGaramondSC12-Regular.otf'\n    ]\n  #.........................................................................................................\n  for path in paths\n    debug '^33443^', path\n    try\n      path                  = resolve_path path\n      fs                    = HB.new_fontshaper path, features\n      await HB.shape_text fs, text\n      for d in fs.arrangement\n        urge d\n    finally\n      # debug '^333322^', fs\n      HB.destruct fs\n  #.........................................................................................................\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  await @demo_shape_text()\n\n\n"
  ]
}